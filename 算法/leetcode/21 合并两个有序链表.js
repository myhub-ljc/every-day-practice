/**
 * 解题思路：
 *  （1）与归并排序中的合并两个有序数组很相似
 *  （2）将数组替换成链表就能解此题
 * 解题步骤：
 * （1）新建一个新链表，作为返回结果
 * （2）用指针遍历两个有序链表并比较两个链表的当前节点，将较小者先接入新链表并将指针后移一位
 * （3）链表遍历结束，返回新链表
 */

 var mergeTwoLists = function(l1, l2) {
    //先实例化得到一个新的res链表节点
    const res = new ListNode(0);

    //定义一个新链表指针
    let p = res;
    //再分别给两个有序的链表也定义一个指针
    let p1 = l1;
    let p2 = l2;
    while(p1 && p2) {
        //如果p1的值大于p2的值
        if(p1.val > p2.val) {
            //那么将p的指针先指向p2
            p.next = p2;
            //p2的指向也要后移一位
            p2 = p2.next;
        } else {
            p.next = p1;
            p1 = p1.next;
        }
        //那么新指针的指向也是需要向后移动一位的
        p = p.next;
    }
    //还得考虑另外两种情况
    if(p1) {
        p.next = p1;
    }
    if(p2) {
        p.next = p2;
    }

    //注意返回的是res.next(因为p本身是指的是上一个值没有意义)
    return res.next;

    /**
        时间复杂度：O(n)    
        空间复杂度：O(1)
     */
};